# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.0"

      - name: Build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PORT: ${{ secrets.PORT }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          MINIO_URL: ${{ secrets.MINIO_URL }}
          MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
        run: |
          go build -o fitmeapp .
          ls -alh

      - name: Copy builded app file
        uses: appleboy/scp-action@v0.1.7
        if: github.ref == 'refs/heads/master'
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: fitmeapp
          target: ${{ secrets.REMOTE_PROJECT_FOLDER }}

      - name: Kill old and run new app
        uses: D3rHase/ssh-command-action@latest
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          user: ${{ secrets.USERNAME }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          command: |
            cd ${{ secrets.REMOTE_PROJECT_FOLDER }}
            kill $(ps aux | grep './fitmeapp' | grep -v grep | awk '{print $2}')
            ./fitmeapp &
